{"version":3,"sources":["storage/user.js","utils/uuid.js","utils/eventListenerClass.js","storage/chat.js","utils/socket.js","storage/mediaStreams.js","utils/webRTC.js","components/login/index.js","components/usersList/index.js","components/videoGrid/videoBox/index.js","components/videoGrid/streamControls/assets/camera.svg","components/videoGrid/streamControls/assets/microphone.svg","components/videoGrid/streamControls/index.js","components/videoGrid/index.js","components/chat/chatHistory/index.js","components/chat/chatInput/index.js","components/chat/index.js","App.js","reportWebVitals.js","index.js"],"names":["user_instance","this","_user","id","name","room","roomId","value","console","log","undefined","url","URL","window","location","href","urlParams","URLSearchParams","search","get","s4","Math","floor","random","toString","uuid","append","EventListenerClass","_eventListeners","type","handler","push","filter","i","length","chat_instance","_log","data","time","Date","forEach","socket_instance","onConnect","socket","connected","onError","onLogged","onRoomData","users","onBeforeUnload","emit","onMessage","sendNewMessage","message","text","sendRTCOverSocket","to","user","io","reconnectionDelayMax","on","webRTC_instance","socketReceived","webrtcNewPeer","username","media_instance","_id","_localStream","getUserMedia","then","stream","catch","error","_streams","addStream","navigator","mediaDevices","video","audio","track","getAudioTracks","getVideoTracks","warn","getTrack","enabled","peers","hasOwnProperty","channel","close","e","a","createConnection","pc","connection","initConnection","initMedia","createOffer","offer","setLocalDescription","remoteCandidateReceived","remoteOfferReceived","remoteAnswerReceived","answer","setRemoteDescription","candidate","addIceCandidate","createAnswer","onicecandidate","event","oniceconnectionstatechange","iceConnectionState","removeStream","connectionsCount","ontrack","streams","localStream","getTracks","addTrack","RTCPeerConnection","server","_connectionsCount","iceServers","credential","count","Login","useState","setUsername","setError","setConnected","useEffect","addEventListener","onConnectionChange","removeEventListener","handlerOnClick","connect","className","htmlFor","style","color","placeholder","onChange","target","onKeyDown","keyCode","required","onClick","UserList","usersList","setUsersList","onUsersChange","map","VideoBox","videoId","title","videoEl","useRef","onStreamAdded","onStreamToggled","getStream","current","srcObject","ref","autoPlay","muted","StreamControls","getState","localId","setVideo","setAudio","backgroundColor","toggleStream","src","camera_icon","alt","microphone_icon","VideoGrid","selectedVideo","handleClick","document","getElementById","substr","ChatHistory","messages","setMessages","v","getHours","getMinutes","whiteSpace","AutoTextArea","textAreaRef","setText","textAreaHeight","setTextAreaHeight","scrollHeight","sendMessage","msg","trim","rows","height","flexGrow","shiftKey","preventDefault","viewBox","d","Chat","App","logged","setLogged","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a5589d00.chunk.js","sourcesContent":["import {uuid} from \"../utils/uuid\";\r\n\r\nclass user {\r\n    constructor() {\r\n        /* construct user data and generate or parse room id from url params */\r\n        this._user = {id: '', name: '', room: this.roomId};\r\n    }\r\n\r\n    get user() {\r\n        return this._user;\r\n    }\r\n\r\n    set user(value) {\r\n        this._user = value;\r\n        console.log('Logged', this._user);\r\n    }\r\n\r\n    /*\r\n    * generate room id if url params is empty or parse room id from url params\r\n    * params should be ?room=[room_id]\r\n    */\r\n    get roomId() {\r\n        if (this._user === undefined || this._user.room === undefined) {\r\n            const url = new URL(window.location.href);\r\n            const urlParams = new URLSearchParams(url.search);\r\n            let room = urlParams.get('room')\r\n            if (!room) {\r\n                room = uuid();\r\n                urlParams.append('room', room);\r\n                window.location.search = urlParams;\r\n            }\r\n            return room;\r\n        } else {\r\n            return this._user.room;\r\n        }\r\n    }\r\n}\r\n\r\nexport const user_instance = new user();","//generate new random uuid\r\nexport const uuid = function() {\r\n    const s4 = function () {\r\n        return Math.floor(Math.random() * 0x10000).toString(16);\r\n    };\r\n    return `${s4()}${s4()}-${s4()}${s4()}}`;\r\n}","/*\r\nExtensible type for tracking changes in objects\r\nWorks on th events\r\nanother object subscribes to the type of event and passes functions for processing\r\n */\r\nexport default class EventListenerClass {\r\n    constructor() {\r\n        this._eventListeners = {};\r\n    }\r\n\r\n    /*\r\n    add event listener to event listeners object\r\n     */\r\n    addEventListener(type, handler) {\r\n        if (this._eventListeners[type] === undefined)\r\n            this._eventListeners[type] = [];\r\n        this._eventListeners[type].push(handler);\r\n    }\r\n\r\n    /*\r\n    remove event from event listeners\r\n    if there are no more event in event listeners delete this type\r\n     */\r\n    removeEventListener(type, handler) {\r\n        if (this._eventListeners[type] !== undefined){\r\n            this._eventListeners[type] = this._eventListeners[type]\r\n                .filter(i => i.toString() !== handler.toString());\r\n            if(this._eventListeners[type].length === 0)\r\n                delete this._eventListeners[type];\r\n        }\r\n    }\r\n}","import EventListenerClass from \"../utils/eventListenerClass\";\r\n\r\nclass chat  extends EventListenerClass{\r\n    constructor() {\r\n        super();\r\n        this._log = [];\r\n    }\r\n\r\n    get log() {\r\n        return this._log;\r\n    }\r\n\r\n    /*\r\n    * Adding new message to chatHistory\r\n    * when message is added calls all methods to handle events\r\n     */\r\n    push(value) {\r\n        value.data.time = new Date(value.data.time);\r\n        this._log.push(value);\r\n        this._eventListeners['newMessage']?.forEach(i => i(value));\r\n        this._eventListeners['newMessages']?.forEach(i => i(this._log));\r\n    }\r\n}\r\n\r\nexport const chat_instance = new chat();","import {io} from \"socket.io-client\";\r\nimport {user_instance} from \"../storage/user\";\r\nimport {chat_instance} from \"../storage/chat\";\r\nimport EventListenerClass from \"./eventListenerClass\";\r\nimport {webRTC_instance} from \"./webRTC\";\r\n\r\n//automatic endpoint selection based on environment variables type\r\nconst ENDPOINT = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development') ?\r\n    'http://localhost:4001' : 'https://webrtc-chat-api.herokuapp.com/';\r\n\r\nclass socket extends EventListenerClass {\r\n    constructor() {\r\n        super();\r\n        this.socket = io(ENDPOINT, {\r\n            reconnectionDelayMax: 10000\r\n        });\r\n        /* Tracks connection to the socket by connected state */\r\n        this.socket.on(\"connect\", this.onConnect);\r\n        this.socket.on(\"disconnect\", this.onConnect);\r\n    }\r\n\r\n    connect({user, room}) {\r\n        if (!this.socket.connected) {\r\n            return;\r\n        }\r\n\r\n        /* Subscribe to events from socket */\r\n        this.socket.on(\"webrtc\", webRTC_instance.socketReceived);\r\n        this.socket.on(\"webrtc_new_peer\", webRTC_instance.webrtcNewPeer);\r\n        this.socket.on(\"roomData\", this.onRoomData);\r\n        this.socket.on(\"message\", this.onMessage);\r\n        this.socket.on(\"logged\", this.onLogged);\r\n        this.socket.on(\"error\", this.onError);\r\n\r\n        /* sending to socket server room join request */\r\n        this.socket.emit(\"join\", {username: user, room: room});\r\n    }\r\n\r\n    /* when connected or disconnected from socket calls all methods to handle events */\r\n    onConnect = (data) => {\r\n        this._eventListeners['connectionChange']?.forEach(i => {\r\n            i(this.socket.connected);\r\n        });\r\n    }\r\n\r\n    /* when error if arrived from socket calls all methods to handle events */\r\n    onError = (data) =>  {\r\n        this._eventListeners['error']?.forEach(i => {\r\n            i(data);\r\n        });\r\n    }\r\n\r\n    /* when successfully logged to socket calls all methods to handle events */\r\n    onLogged = (data) =>  {\r\n        this._eventListeners['logged']?.forEach(i => {\r\n            i(data);\r\n        });\r\n    }\r\n\r\n    /* when new user connected or disconnected to socket calls all methods to handle events */\r\n    onRoomData = (data) =>  {\r\n        this._eventListeners['usersChange']?.forEach(i => {\r\n            i(data.users);\r\n        });\r\n    }\r\n\r\n    /* before unloaded send to socket disconnect message */\r\n    onBeforeUnload = () =>  {\r\n        this.socket.emit('disconnect');\r\n    }\r\n\r\n    /* add new message to chat history */\r\n    onMessage = (data) =>  {\r\n        chat_instance.push(data);\r\n    }\r\n\r\n    /* send new text message to socket (it will be sent to other users in the room)*/\r\n    sendNewMessage = (message) =>  {\r\n        socket_instance.socket.emit(\"sendMessage\", {text: message});\r\n    }\r\n\r\n    /*\r\n    * send new message to socket,\r\n    * contains info to establish connections between peers via webRTC\r\n    * like offer, answer, candidate (iceCandidate)\r\n    */\r\n    sendRTCOverSocket = (to, type, message) =>  {\r\n        socket_instance.socket.emit(\"webrtc\", {id: user_instance.user.id, to: to, type: type, data: message});\r\n    }\r\n}\r\n\r\nexport const socket_instance = new socket();","import EventListenerClass from \"../utils/eventListenerClass\";\r\n\r\nclass mediaStreams extends EventListenerClass {\r\n    constructor() {\r\n        super();\r\n        this._id = null;\r\n        /* local media stream from user */\r\n        this._localStream = undefined;\r\n        /* Setting local media stream from user media device */\r\n        this.getUserMedia().then(stream => {\r\n            this._localStream = stream;\r\n        }).catch(error => console.error('Error get user media', error));\r\n        /* all streams from users in room include localStream (stream with local user.id) */\r\n        this._streams = {};\r\n    }\r\n\r\n    /* Equivalent to user.id need to found localStream */\r\n    get localId() {\r\n        return this._id;\r\n    }\r\n    /* set local id and add localStream to all streams */\r\n    set localId(value) {\r\n        this._id = value;\r\n        this.addStream(value, this._localStream);\r\n    }\r\n\r\n    get localStream() {\r\n        return this._localStream;\r\n    }\r\n\r\n    /* return user media device with audio and video track */\r\n    getUserMedia() {\r\n        return navigator.mediaDevices.getUserMedia({video: true, audio: true});\r\n    }\r\n\r\n    /*\r\n    * add new stream from peer or user to media streams\r\n    * when stream is added calls all methods to handle events\r\n    * set localStream if local id is setted\r\n    */\r\n    addStream(id, stream) {\r\n        this._streams[id] = stream;\r\n        this._eventListeners[`streamAdded-${id}`]?.forEach(i => {\r\n            if (this._streams[id] !== undefined)\r\n                i(this._streams[id])\r\n        });\r\n        if (this._id === id) {\r\n            this._localStream = this._streams[id];\r\n        }\r\n    }\r\n\r\n    /*\r\n    get track from stream based on track type [audio, video] and peer id\r\n    return undefined when stream doesn't exist\r\n     */\r\n    getTrack(id, type) {\r\n        let track;\r\n        if (this._streams[id] === undefined) {\r\n            console.warn('Stream doesn\\'t exist', id)\r\n            return undefined;\r\n        }\r\n        switch (type) {\r\n            case 'audio':\r\n                track = this._streams[id].getAudioTracks()[0];\r\n                break;\r\n            case 'video':\r\n                track = this._streams[id].getVideoTracks()[0];\r\n                break;\r\n            default:\r\n                console.warn('Unknown stream type', type);\r\n                return undefined;\r\n        }\r\n        return track;\r\n    }\r\n\r\n    /*\r\n    * get track state (enabled or not)\r\n    * disabled tracks contains no data to transfer\r\n    * if track doesn't exist return disabled state\r\n    */\r\n    getState(id, type) {\r\n        return this.getTrack(id, type) ?? {enabled: false};\r\n    }\r\n\r\n    /*\r\n    * toggle track state to turn off or on for video or audio\r\n    * if track doesn't exist return disabled state by default\r\n    * if the track was added, call the events associated with it\r\n    */\r\n    toggleStream(id, type) {\r\n        let track = this.getTrack(id, type);\r\n        if (track !== undefined) {\r\n            track.enabled = !track.enabled;\r\n            this._eventListeners[`streamToggled-${id}`]?.forEach(i => {\r\n                if (this._streams[id] !== undefined)\r\n                    i(this._streams[id])\r\n            });\r\n        }\r\n        return track ?? {enabled: false};\r\n    }\r\n\r\n    /* remove track from streams */\r\n    removeStream(id) {\r\n        if (this._streams[id] !== undefined)\r\n            delete this._streams[id];\r\n    }\r\n\r\n    /* get track from streams based on peer or local id */\r\n    getStream(id) {\r\n        return this._streams[id];\r\n    }\r\n}\r\n\r\nexport const media_instance = new mediaStreams();","import {socket_instance} from \"./socket\";\r\nimport EventListenerClass from \"./eventListenerClass\";\r\nimport {media_instance} from \"../storage/mediaStreams\";\r\n\r\nclass webRTC extends EventListenerClass {\r\n    constructor() {\r\n        super();\r\n        this._connectionsCount = 0;\r\n\r\n        /* remote peers array (contains peerConnections) */\r\n        this.peers = {};\r\n\r\n        /* servers for NAT bypassing */\r\n        this.server = {\r\n            iceServers: [\r\n                /* Servers on heroku using node-turn */\r\n                {\r\n                    url: 'turn:webrtc-chat-api.herokuapp.com:3478',\r\n                    username: 'turnclient',\r\n                    credential: '$0mep@$$w0rd'\r\n                },\r\n                {url: 'stun:webrtc-chat-api.herokuapp.com'},\r\n                /* Servers on own hosting using coturn */\r\n                {\r\n                    url: 'turn:217.150.77.131:3478',\r\n                    username: 'turnclient',\r\n                    credential: '$0mep@$$w0rd'\r\n                },\r\n                {url: 'stun:217.150.77.131:3478'},\r\n                /* Default google stun servers */\r\n                {url: 'stun:stun.l.google.com:19302'},\r\n                {url: 'stun:stun.l.google.com:19302'},\r\n                {url: 'stun:stun1.l.google.com:19302'},\r\n            ]\r\n        };\r\n    }\r\n\r\n    /* Return connection count */\r\n    get connectionsCount() {\r\n        return this._connectionsCount;\r\n\r\n    }\r\n\r\n    /* Sets connection count and calls all methods to handle events */\r\n    set connectionsCount(value) {\r\n        this._connectionsCount = value;\r\n        this._eventListeners['connectionsChange']?.forEach(i => {\r\n            i({\r\n                count: this._connectionsCount,\r\n                peers: this.peers\r\n            })\r\n        });\r\n    }\r\n\r\n    /* before unloaded closes channels of all peers */\r\n    onBeforeUnload = () => {\r\n        for (let id in this.peers) {\r\n            if (this.peers.hasOwnProperty(id)) {\r\n                if (this.peers[id].channel !== undefined) {\r\n                    try {\r\n                        this.peers[id].channel.close();\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Called for the caller to create a new connection */\r\n    webrtcNewPeer = async ({user, data}) => {\r\n        /* Messages from socket about webRTC must be from SERVER (forwarding) */\r\n        if (user !== 'SERVER')\r\n            return;\r\n        const {id, name, room} = data;\r\n\r\n        /* Creating new peer connection and adding it to the peers connection array */\r\n        this.createConnection(id);\r\n        const pc = this.peers[id].connection;\r\n\r\n        /* Generated candidates by the onicecandidate-handler */\r\n        this.initConnection(id, pc);\r\n\r\n        /*\r\n        * Register track handlers\r\n        * Add MediaStreamTracks to the connections\r\n        */\r\n        await this.initMedia(id, pc);\r\n\r\n        /*\r\n        * Generates an offer by calling createOffer()\r\n        * Sets the generated offer as local description\r\n        * Sends the generated offer over the signalling channel to peer\r\n        */\r\n        await pc.createOffer().then(offer => {\r\n            return pc.setLocalDescription(offer).then(() => {\r\n                socket_instance.sendRTCOverSocket(id, \"offer\", offer);\r\n            }).catch(error => console.error('Error set local description', error));\r\n        }).catch(error => console.error('Error create offer', error));\r\n\r\n\r\n    }\r\n\r\n    /* Processing incoming messages from the socket about webRTC connection */\r\n    socketReceived = ({id, to, type, data}) => {\r\n        //console.log({id, to, type, data});\r\n        switch (type) {\r\n            case \"candidate\":\r\n                this.remoteCandidateReceived(id, data);\r\n                break;\r\n            case \"offer\":\r\n                this.remoteOfferReceived(id, data);\r\n                break;\r\n            case \"answer\":\r\n                this.remoteAnswerReceived(id, data);\r\n                break;\r\n            default:\r\n                console.log(`Unknown type received from socket:`);\r\n                console.log({id, to, type, data});\r\n                break;\r\n        }\r\n    }\r\n\r\n    /* Receives the answer from remote peer and set remote description */\r\n    remoteAnswerReceived = async (id, answer) => {\r\n        const pc = this.peers[id].connection;\r\n        await pc.setRemoteDescription(answer).catch(error => console.error('Error set remote description', error));\r\n    }\r\n\r\n    /* Receives ice candidates the remote peer */\r\n    remoteCandidateReceived = async (id, candidate) => {\r\n        this.createConnection(id);\r\n        const pc = this.peers[id].connection;\r\n        await pc.addIceCandidate(candidate)\r\n            .catch(error => console.error('Error add iceCandidate', error));\r\n    }\r\n\r\n\r\n    /* Called for the receiver to create a new connection */\r\n    remoteOfferReceived = async (id, offer) => {\r\n        /* Creating new peer connection and adding it to the peers connection array */\r\n        this.createConnection(id);\r\n        const pc = this.peers[id].connection;\r\n\r\n        /*\r\n        * Register track handlers\r\n        * Add MediaStreamTracks to the connections\r\n        */\r\n        await this.initMedia(id, pc);\r\n\r\n        /* Generated candidates by the onicecandidate-handler */\r\n        this.initConnection(id, pc);\r\n\r\n        /*\r\n        * Receives the offer and sets it like remote description\r\n        * Creates an sdp answer\r\n        * Sets the answer as local description\r\n        * Sends the answer to calling peer\r\n        */\r\n        await pc.setRemoteDescription(offer).then(() => {\r\n            pc.createAnswer().then(answer => {\r\n                return pc.setLocalDescription(answer).then(() => {\r\n                    socket_instance.sendRTCOverSocket(id, \"answer\", answer);\r\n                }).catch(error => console.error('Error set local description', error));\r\n            }).catch(error => console.error('Error create answer', error));\r\n        }).catch(error => console.error('Error set remote description', error));\r\n    }\r\n\r\n    /* Generated candidates by the onicecandidate-handler */\r\n    initConnection = (id, pc) => {\r\n        /* Generated candidates by the onicecandidate-handler and sends it to peer throw socket */\r\n        pc.onicecandidate = function (event) {\r\n            if (event.candidate)\r\n                socket_instance.sendRTCOverSocket(id, \"candidate\", event.candidate);\r\n        }\r\n\r\n        /* Monitors connection state change */\r\n        pc.oniceconnectionstatechange = (event) => {\r\n            switch (pc.iceConnectionState) {\r\n                /*\r\n                * Decrease RTC connections count, removes peer from peers array and\r\n                * removes tracks by peer id from media streams\r\n                */\r\n                case 'disconnected': {\r\n                    delete this.peers[id];\r\n                    media_instance.removeStream(id);\r\n                    this.connectionsCount = this.connectionsCount - 1;\r\n                    console.log(`[${id}] disconnected. Peers: ${this.connectionsCount}`);\r\n                    break;\r\n                }\r\n                /* Increase RTC connections count */\r\n                case 'connected': {\r\n                    this.connectionsCount = this.connectionsCount + 1;\r\n                    console.log(`[${id}] connected. Peers: ${this.connectionsCount}`);\r\n                    break;\r\n                }\r\n                default:\r\n                    console.log(pc.iceConnectionState);\r\n                    break;\r\n            }\r\n        }\r\n\r\n        /* The block is disabled until better times when I\r\n         finish tracking access to camera permission\r\n\r\n        pc.onnegotiationneeded = async function (event) {\r\n            if (pc.signalingState !== \"stable\") return;\r\n            pc.createOffer().then(offer => {\r\n                pc.setLocalDescription(offer).then(() => {\r\n                    socket_instance.sendRTCOverSocket(id, 'offer', pc.localDescription);\r\n                }).catch(error => console.error('Error set local description', error));\r\n            }).catch(error => console.error('Error create offer', error));\r\n        }         */\r\n    }\r\n\r\n    /*\r\n    * Initializes onTrack event and adding media stream to track\r\n    * If the user has allowed access to the microphone and camera\r\n    * adds tracks to the connection tracks\r\n    */\r\n    initMedia = async (id, pc) => {\r\n        pc.ontrack = function ({streams: [stream]}) {\r\n            media_instance.addStream(id, stream);\r\n        }\r\n\r\n        if (media_instance.localStream !== undefined)\r\n            media_instance.localStream.getTracks().forEach(track => {\r\n                pc.addTrack(track, media_instance.localStream);\r\n            })\r\n    }\r\n\r\n    /*\r\n    * Initializes a new connection\r\n    * connection individual for each peer\r\n    */\r\n    createConnection = (id) => {\r\n        if (this.peers[id] === undefined) {\r\n            this.peers[id] = {};\r\n            this.peers[id].connection =\r\n                new RTCPeerConnection(this.server);\r\n        }\r\n    }\r\n}\r\n\r\nexport const webRTC_instance = new webRTC();\r\n","import React, {useEffect, useState} from 'react';\r\nimport './style.css';\r\nimport {socket_instance} from \"../../utils/socket\";\r\nimport {user_instance} from \"../../storage/user\";\r\n\r\nexport default function Login() {\r\n    const [username, setUsername] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [connected, setConnected] = useState('');\r\n\r\n    /* Track socket connection status and auth errors (duplicate/empty/unallowed logins) */\r\n    useEffect(() => {\r\n        socket_instance.addEventListener('error', onError);\r\n        socket_instance.addEventListener('connectionChange', onConnectionChange);\r\n        return () => {\r\n            socket_instance.removeEventListener('error', onError);\r\n            socket_instance.removeEventListener('connectionChange', onConnectionChange);\r\n        };\r\n    }, []);\r\n\r\n    const onError = function (error) {\r\n        switch (error.type) {\r\n            case 'addUser':\r\n                setError(error.error);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /* Track enter press to imitate button press */\r\n    const onKeyDown = function (event){\r\n        if (event.keyCode === 13) {\r\n            handlerOnClick();\r\n        }\r\n    }\r\n\r\n    const onConnectionChange = function (data) {\r\n        setConnected(data);\r\n    }\r\n\r\n    const handlerOnUsernameInput = function (event) {\r\n        setUsername(event.target.value);\r\n    }\r\n\r\n    /* send username to socket to check and get {user ID, validated username, room ID}*/\r\n    const handlerOnClick = function (value) {\r\n        socket_instance.connect({user: username, room: user_instance.user.room});\r\n    }\r\n\r\n    return <div className={'Login'}>\r\n        <div className={'login-container'}>\r\n            <div className={'login-info-container'}>\r\n                <label htmlFor=\"uname\"><b>Username</b></label>\r\n                <label className=\"info-connected\" style={{color: connected ? '#B1D9CD' : '#FDB196'}}><b>{connected ? 'Connected' : 'Disconnected'}</b></label>\r\n            </div>\r\n            <input type=\"text\"\r\n                   placeholder=\"Enter Username\"\r\n                   onChange={handlerOnUsernameInput}\r\n                   onKeyDown={onKeyDown}\r\n                   required/>\r\n            <div className={'login-error'}>{error}</div>\r\n            <button type=\"submit\" onClick={handlerOnClick}>Login</button>\r\n        </div>\r\n    </div>\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './style.css';\r\nimport {socket_instance} from \"../../utils/socket\";\r\n\r\nexport default function UserList() {\r\n    const [usersList, setUsersList] = useState([]);\r\n\r\n    /* track getting new users list of users from socket */\r\n    useEffect(() => {\r\n        socket_instance.addEventListener('usersChange', onUsersChange);\r\n        return () => {\r\n            socket_instance.removeEventListener('usersChange', onUsersChange);\r\n        };\r\n    }, []);\r\n\r\n    const onUsersChange = (data) => {\r\n        setUsersList([...data]);\r\n    }\r\n\r\n    return <div className={'UsersList'}>\r\n        <div className={'users-list-container'}>\r\n            <ol className={\"users-list\"}>\r\n                {usersList.map(value =>\r\n                    <li key={value.id} className={'list-item'}>\r\n                        <div className={'user-item-gradient'}/>\r\n                        <div className={'user-item-content'}>\r\n                            <h4>{`${value.name}`}</h4>\r\n                        </div>\r\n                    </li>\r\n                )}\r\n            </ol>\r\n        </div>\r\n    </div>\r\n}","import React, {useEffect, useRef} from 'react';\r\nimport './style.css';\r\nimport {media_instance} from \"../../../storage/mediaStreams\";\r\n\r\nexport default function VideoBox({videoId, title, type, onClick}) {\r\n    const videoEl = useRef(null);\r\n\r\n    /* tracks adding or changing video/audio stream from peer in stream array */\r\n    useEffect(() => {\r\n        media_instance.addEventListener(`streamAdded-${videoId}`, onStreamAdded);\r\n        media_instance.addEventListener(`streamToggled-${videoId}`, onStreamToggled);\r\n\r\n        const stream = media_instance.getStream(videoId);\r\n        /*\r\n        * if  video element exist and streams array contains tracks for current id\r\n        * adding it to video element\r\n        */\r\n        if (videoEl !== null && stream !== undefined) {\r\n            videoEl.current.srcObject = stream;\r\n        }\r\n        return () => {\r\n            media_instance.removeEventListener(`streamAdded-${videoId}`, onStreamAdded);\r\n            media_instance.removeEventListener(`streamToggled-${videoId}`, onStreamToggled);\r\n        }\r\n    }, [])\r\n\r\n    const onStreamAdded = function (stream) {\r\n        if (videoEl !== null)\r\n            videoEl.current.srcObject = stream;\r\n    }\r\n\r\n    const onStreamToggled = function (stream) {\r\n        if (videoEl !== null)\r\n            videoEl.current.srcObject = stream;\r\n    }\r\n\r\n    /*\r\n    * Tracks click on video and then transfer clicked element to videoGrid\r\n    * for setting to selected video box (big view)\r\n    */\r\n    const handleClick = function (event) {\r\n        onClick(event);\r\n    }\r\n\r\n    return (<article key={`article-${videoId}`} className=\"video-listing\">\r\n        <div onClick={handleClick}\r\n             id={`title-${videoId}`}\r\n             className=\"video-title\">{title}</div>\r\n        <div className=\"video-container\">\r\n            <video ref={videoEl} autoPlay muted={type === 'local'} className={`${type}-video`}\r\n                   id={`video-${videoId}`}/>\r\n        </div>\r\n    </article>);\r\n}","export default __webpack_public_path__ + \"static/media/camera.53281603.svg\";","export default __webpack_public_path__ + \"static/media/microphone.b5ad8492.svg\";","import React, {useState} from 'react';\r\nimport camera_icon from './assets/camera.svg';\r\nimport microphone_icon from './assets/microphone.svg';\r\nimport './style.css';\r\nimport {media_instance} from \"../../../storage/mediaStreams\";\r\n\r\nexport default function StreamControls() {\r\n    /* Vars to change style of video and mice icons */\r\n    const [video, setVideo] = useState(media_instance.getState(media_instance.localId, 'video').enabled);\r\n    const [audio, setAudio] = useState(media_instance.getState(media_instance.localId, 'audio').enabled);\r\n\r\n    /* Toggle track state for local id (tracks from local user media devices) */\r\n    const toggleCamera = function () {\r\n        setVideo(media_instance.toggleStream(media_instance.localId, 'video').enabled);\r\n    }\r\n    const toggleMic = function () {\r\n        setAudio(media_instance.toggleStream(media_instance.localId, 'audio').enabled);\r\n    }\r\n\r\n    return (<div className={'StreamControls'}>\r\n        <div className={'controls-container'}>\r\n            <div style={{backgroundColor: (video ? '#B1D9CD' : '#FDB196')}} className={'round-container'}\r\n                 onClick={toggleCamera}>\r\n                <img src={camera_icon} alt=\"camera icon\"/>\r\n            </div>\r\n            <div style={{backgroundColor: (audio ? '#B1D9CD' : '#FDB196')}} className={'round-container'}\r\n                 onClick={toggleMic}>\r\n                <img src={microphone_icon} alt=\"microphone icon\"/>\r\n            </div>\r\n        </div>\r\n    </div>);\r\n}","import './style.css';\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {socket_instance} from \"../../utils/socket\";\r\nimport {user_instance} from \"../../storage/user\";\r\nimport VideoBox from \"./videoBox/index\";\r\nimport StreamControls from \"./streamControls\";\r\n\r\nexport default function VideoGrid() {\r\n    const [usersList, setUsersList] = useState([]);\r\n    const selectedVideo = useRef(null);\r\n\r\n    /* track getting new users list of users from socket for create video row*/\r\n    useEffect(() => {\r\n        socket_instance.addEventListener('usersChange', onUsersChange);\r\n        return () => {\r\n            socket_instance.removeEventListener('usersChange', onUsersChange);\r\n        };\r\n    }, []);\r\n\r\n    const onUsersChange = (data) => {\r\n        setUsersList([...data]);\r\n    }\r\n\r\n    /* set video and audio stream from clicked video to selected (big) video element */\r\n    const handleClick = (event) => {\r\n        selectedVideo.current.srcObject = document.getElementById(`video-${event.target.id.substr(6)}`).srcObject;\r\n    }\r\n\r\n    return <div className={'VideoGrid'}>\r\n        <div className={\"video-row-container\"}>\r\n            <VideoBox title={user_instance.user.name}\r\n                      videoId={user_instance.user.id} onClick={handleClick}\r\n                      type={'local'}/>\r\n            {\r\n                usersList.filter(user => user.id !== user_instance.user.id).map(user =>\r\n                    <VideoBox key={`video-${user.id}`} title={user.name}\r\n                              videoId={user.id} onClick={handleClick}\r\n                              type={'remote'}/>\r\n                )\r\n            }\r\n        </div>\r\n        <div className={'selected-video-container'}>\r\n            <video ref={selectedVideo} autoPlay muted className=\"selected-video\" id=\"selected-video\"/>\r\n        </div>\r\n        <div className={'stream-controls-container'}>\r\n            <StreamControls/>\r\n        </div>\r\n    </div>;\r\n}","import React, {useEffect, useState} from 'react';\r\nimport './style.css';\r\nimport {chat_instance} from \"../../../storage/chat\";\r\n\r\nexport default function ChatHistory() {\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        chat_instance.addEventListener('newMessage', onMessage);\r\n        return () => {\r\n            chat_instance.removeEventListener('newMessage', onMessage);\r\n        };\r\n    }, []);\r\n\r\n    const onMessage = (event) => {\r\n        setMessages(v => [...v, event]);\r\n    }\r\n\r\n    /* Convert time to 00:00 format */\r\n    const formatTime = (time) => `${('0' + time.getHours()).substr(-2)}:${('0' + time.getMinutes()).substr(-2)}`\r\n\r\n    return <div className={'ChatHistory'}>\r\n        <div className={'chat-history-container'}>\r\n            {messages.map((data, i) =>\r\n                <div key={i}>\r\n                    <div className={'info-container'}>\r\n\r\n                        <div className={'user'}>{`${data.user}`}</div>\r\n                        <div className={'time'}>\r\n                            {formatTime(data.data.time)}\r\n                        </div>\r\n                    </div>\r\n                    <span style={{whiteSpace: 'pre-line'}} className={'message'}>{`${data.data.text}`}</span>\r\n                </div>\r\n            )}\r\n        </div>\r\n    </div>\r\n}","import React, {useEffect, useRef, useState,} from \"react\";\r\nimport './style.css'\r\nimport {socket_instance} from \"../../../utils/socket\";\r\n\r\nexport default function AutoTextArea() {\r\n    const textAreaRef = useRef(null);\r\n    const [text, setText] = useState(\"\");\r\n    const [textAreaHeight, setTextAreaHeight] = useState(\"auto\");\r\n\r\n    /* Automatically increase text area height based on text height */\r\n    useEffect(() => {\r\n        setTextAreaHeight(`${textAreaRef.current.scrollHeight + 2}px`);\r\n    }, [text]);\r\n\r\n\r\n    const onChangeHandler = function (event) {\r\n        /* need to decrease text area height on text deleting */\r\n        setTextAreaHeight(\"auto\");\r\n        setText(event.target.value);\r\n    };\r\n\r\n    const onKeyDown = function (event) {\r\n        /* SHIFT + ENTER = new line, only ENTER send message */\r\n        if (!event.shiftKey && event.keyCode === 13) {\r\n            sendMessage();\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    const sendMessage = function () {\r\n        const msg = text.trim();\r\n        if (msg.length === 0)\r\n            return;\r\n\r\n        socket_instance.sendNewMessage(msg);\r\n\r\n        /* Sets default text area height */\r\n        setText('');\r\n        setTextAreaHeight(\"auto\");\r\n    }\r\n\r\n    return (\r\n        <div className={'AutoTextArea'}>\r\n            <div className={'text-area-container'}>\r\n\t\t\t<textarea className={'auto-text-area'}\r\n                      ref={textAreaRef}\r\n                      rows={1}\r\n                      style={{\r\n                          height: textAreaHeight,\r\n                          flexGrow: 1,\r\n                      }}\r\n                      value={text}\r\n                      onChange={onChangeHandler}\r\n                      onKeyDown={onKeyDown}\r\n            />\r\n                <button onClick={sendMessage}>\r\n                    <svg id=\"send-icon\" className=\"send-icon\" viewBox=\"0 0 488.721 488.721\">\r\n\r\n                        <path d=\"M483.589,222.024c-5.022-10.369-13.394-18.741-23.762-23.762L73.522,11.331C48.074-0.998,17.451,9.638,5.122,35.086\r\n\t\t\tC-1.159,48.052-1.687,63.065,3.669,76.44l67.174,167.902L3.669,412.261c-10.463,26.341,2.409,56.177,28.75,66.639\r\n\t\t\tc5.956,2.366,12.303,3.595,18.712,3.624c7.754,0,15.408-1.75,22.391-5.12l386.304-186.982\r\n\t\t\tC485.276,278.096,495.915,247.473,483.589,222.024z M58.657,446.633c-8.484,4.107-18.691,0.559-22.798-7.925\r\n\t\t\tc-2.093-4.322-2.267-9.326-0.481-13.784l65.399-163.516h340.668L58.657,446.633z M100.778,227.275L35.379,63.759\r\n\t\t\tc-2.722-6.518-1.032-14.045,4.215-18.773c5.079-4.949,12.748-6.11,19.063-2.884l382.788,185.173H100.778z\"/>\r\n\r\n                    </svg>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport './style.css';\r\nimport ChatHistory from \"./chatHistory\";\r\nimport AutoTextArea from \"./chatInput\";\r\n\r\nexport default function Chat() {\r\n    return <div className={'Chat'}>\r\n        <ChatHistory/>\r\n        <AutoTextArea/>\r\n    </div>\r\n}","import {useEffect, useState} from \"react\";\nimport {webRTC_instance} from \"./utils/webRTC\";\nimport Login from './components/login'\nimport {socket_instance} from \"./utils/socket\";\nimport UserList from \"./components/usersList\";\nimport VideoGrid from \"./components/videoGrid\";\nimport Chat from \"./components/chat\";\nimport {user_instance} from \"./storage/user\";\nimport {media_instance} from \"./storage/mediaStreams\";\nimport './App.css';\n\nfunction App() {\n    const [logged, setLogged] = useState(false)\n\n    /* Tracks logged status\n    * sets user data from server to local storage {name, id, room}\n    * sets local id to media instance (store local and peers streams/tracks)\n    */\n    const onLogged = (data) => {\n        user_instance.user = data.data;\n        media_instance.localId = data.data.id;\n        setLogged(true);\n    }\n\n    /* Subscribe to login event and add before unload for socket and RTC connections*/\n    useEffect(() => {\n        socket_instance.addEventListener('logged', onLogged);\n        if (!logged)\n            return;\n        window.addEventListener(\"beforeunload\", socket_instance.onBeforeUnload);\n        window.addEventListener(\"beforeunload\", webRTC_instance.onBeforeUnload);\n        return () => {\n            socket_instance.removeEventListener('logged', onLogged);\n            window.removeEventListener(\"beforeunload\", webRTC_instance.onBeforeUnload);\n            window.removeEventListener(\"beforeunload\", socket_instance.onBeforeUnload);\n        };\n    }, [logged]);\n\n    return <div className=\"App\"> {logged ? <>\n        <>\n            <div className='App-body'>\n                <div className={'video-grid-container'}>\n                    <VideoGrid/>\n                </div>\n                <div className={'info-chat-container'}>\n                    <UserList/>\n                    <Chat/>\n                </div>\n            </div>\n        </>\n    </> : <Login/>}\n    </div>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}